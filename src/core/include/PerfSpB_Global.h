#include "PerfSparseBLAS_func.h"
#include "PerfSparseBLAS_type.h"

#ifdef __cplusplus
extern "C" {
#endif
    void PerfSpB_Global_is_csc_set(bool is_csc);
    bool PerfSpB_Global_is_csc_get();

    perfSpB_vector_format_value_ext PerfSpB_Global_get_Vector_Format();
    void PerfSpB_Global_Vector_Format_set(perfSpB_vector_format_value_ext format);

    // Linked list Node structure.
    typedef struct listNode_struct
    {
        struct listNode_struct *next;
        perfSpB_index data;
    } listNode;

    /** This structure record some messages used in SpVSpM
     * @param Indices_NZRows : Indices of the non-zero rows of the matrix selected by the input vector. @capacity_vector_nnz elements should be allocated to it.
     * @param LL_Index_Ptr : The indices of all selected non-zero rows in @ListNodes, which is similar to the ptr array in CSC or CSR format. (@capacity_vector_nnz + 1) elements should be  allocated to it.
     * @param ListNodes : The array which stores all the linked list generated by all non-zero rows/cols. @capacity_nnz elements should be allocated to it.
     * @param ListPtr : Array of pointers to all linked tables, which corresponds to LL_Index_Ptr. @capacity_nnz_row elements should be allocated to it.
     */
    typedef struct
    {
        unsigned int capacity_vector_nnz;
        unsigned int capacity_nnz;
        unsigned int capacity_nnz_row;

        unsigned int *Indices_NZRows;
        unsigned int *LL_Index_Ptr;
        listNode *ListNodes;
        listNode **ListPtr;
    } LinkedListMes_t;

    extern LinkedListMes_t LinkedListMes;

    /**These functions are about memory management for the temporary arrays used in vxm.
     * They will control and utilize the above LinkedListMes.
     * ! Currently, these functions are only used in SpVCSRM_LOR_LAND_SEMIRING_BOOL_LinkTable
     */
    void PerfSpB_LinkedList_malloc();
    void PerfSpB_LinkedList_grow(unsigned int nnz, unsigned int nnz_row);
    void PerfSpB_LinkedList_free();
    void PerfSpB_NNZ_Counting_Mes_malloc();
    void PerfSpB_NNZ_Counting_Mes_grow(unsigned int nnz);
    void PerfSpB_NNZ_Counting_Mes_free();

    bool PerfSpB_Warning_switch_get();
#ifdef __cplusplus
}
#endif